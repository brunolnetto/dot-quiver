TODO?: The check-boxes below represent features necessary to achieve:

verb:noun(s)

    build: Artifact(s)
    (batch)assert: scene(s)
    practice:act(s)
    rehearse:rehearsal(s)
    cast:play(s)

Objects:

  [  ]  fixture := object,
  [  ]  assertionArtifact: object(
         (result: object, expectToMap: expectTo) ||
         (result: object, expectToMap: : expectTo, expectation: object)
       ) | Array( (result, expectToMap) || (result, expectToMap, expectation) )
  [  ]  organization := object( setup: function, prepare: function, teardown: function ),
  [  ]  scene := object(
         (result:object, expectToMap:expectTo) ||
         (result:object, expectToMap:expectTo, expectation:object)
       ) | Array(
         (result:object, expectToMap:expectTo) ||
         (result:object, expectToMap:expectTo, expectation:object)
       )
  [  ]  act := scriptCallback + [ organization (defaultOrganization) ]
  [  ]  resource: ( text: String, callback: function );
  [  ]  rehearsal := { "fixture": fixture, "acts": acts }
  [  ]  play := { "name": string, "rehearsals": rehearsals }
  [  ]  audition := { "name": string, "plays": plays }

Callbacks:

  [  ]  scriptCallback := function( preparedFixture:object -> assertionArtifact ),
  [  ]  perform := (act) => {...} // Improve atest
  [  ]  buildScenesFromAssertArtifact: (preparedFixtures) => buildScenes(scriptCallback(preparedFixtures))
  [  ]  buildRehearsal: function( ( fixture:object, acts:Array(Act) ) -> preparedFixtures:object ):
    Algorithm:
      1. Practice act;
      2. Retrieve prepared fixtures from previous act;
      3. Update provided fixture with given prepared fixtures;
      4. Repeat 1.
  [  ]  rehearse: ( description:string, acts:Array(Act) ):
    Questions:
      1. Must a rehearsal have an organization?
      2. If the answer for previous question is yes, how can we integrate "setup-teardown" (check URL https://jestjs.io/docs/setup-teardown)
  [  ]  playCallback: function(  ): () => rehearse(rehearsals)
  [  ]  play: (name, playCallback)

Utils:

  isArtifact := function( (candidate, isArtifactCallback) -> Boolean ),
